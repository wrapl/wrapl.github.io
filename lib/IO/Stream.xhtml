<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/>
	<meta charset="utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
	<meta name="description" content=""/>
	<meta name="author" content="ink, cookbook, recipes"/>
	<meta name="HandheldFriendly" content="True"/>
	<meta name="MobileOptimized" content="320"/>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"/>
	<meta property="og:title" content="Wrapl, The Programming Language"/>
	<meta property="og:description" content="Wrapl, The Programming Language"/>
	<meta property="og:url" content="http://wrapl.sf.net"/>
	<meta property="og:image" content="http://wrapl.sf.net/sample.png"/>
	<link rel="stylesheet" type="text/css" href="/css/spectre.css"/>
	<link rel="stylesheet" type="text/css" href="/css/spectre-exp.css"/>
	<link rel="stylesheet" type="text/css" href="/css/spectre-icons.css"/>
	<link rel="stylesheet" type="text/css" href="/code.css"/>
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous"/>
	<link href="https://fonts.googleapis.com/css?family=Roboto|Roboto+Mono" rel="stylesheet"/>
	<link href="https://fonts.googleapis.com/css?family=Fira+Sans" rel="stylesheet"/>
	<link rel="stylesheet" href="https://cdn.rawgit.com/tonsky/FiraCode/1.205/distr/fira_code.css"/>
	<title>b.IO.Stream</title>
</head>
<body>
<div class="off-canvas off-canvas-sidebar-show">
	<a class="off-canvas-toggle btn btn-primary btn-action" href="#sidebar-id">
		<i class="icon icon-menu"></i>
	</a>
	<div id="sidebar-id" class="off-canvas-sidebar">
		<ul class="nav">
			<li class="nav-item"><a href="/index.xhtml" class="toplevel"><i class="fa fa-home"></i> Home</a>
				<ul class="nav">
					<li class="nav-item"><a href="/index.xhtml#Features">Features</a></li>
					<li class="nav-item"><a href="/index.xhtml#Contact">Contact</a></li>
				</ul>
			</li>
			<li class="nav-item"><a href="/news.xhtml" class="toplevel"><i class="fa fa-clock"></i> News</a></li>
			<li class="nav-item"><a href="/docs.xhtml" class="toplevel"><i class="fa fa-book"></i> Documentation</a>
				<ul class="nav">
					<li class="nav-item"><a href="/ref/tutorial.xhtml">Tutorial</a></li>
					<li class="nav-item"><a href="/docs.xhtml#Reference">Reference</a>
						<ul class="nav flyout right">
							<li class="nav-item"><a href="/ref/syntax.xhtml">Syntax</a></li>
							<li class="nav-item"><a href="/ref/expressions.xhtml">Expressions</a></li>
						</ul>
					</li>
					<li class="nav-item"><a href="/samples.xhtml">Sample</a></li>
					<li class="nav-item"><a href="/lib.xhtml">Libraries</a></li>
					<li class="nav-item"><a href="/docs.xhtml#tools">Tools</a></li>
					<li class="nav-item"><a href="/internals.xhtml">Internals</a></li>
				</ul>
			</li>
			<li class="nav-item"><a href="/download.xhtml" class="toplevel"><i class="fa fa-download"></i> Download</a>
				<ul class="nav">
					<li class="nav-item"><a href="/download.xhtml#Source">Source</a></li>
					<li class="nav-item"><a href="/download.xhtml#Binaries">Binaries</a></li>
				</ul>
			</li>
			<li class="nav-item"><a href="/links.xhtml" class="toplevel"><i class="fa fa-globe"></i> Links</a>
				<ul class="nav">
					<li class="nav-item"><a href="/links.xhtml#Programming_Languages">Other Languages</a></li>
					<li class="nav-item"><a href="/links.xhtml#Development_Tools">Development Tools</a></li>
					<li class="nav-item"><a href="/links.xhtml#Libraries">Libraries</a></li>
				</ul>
			</li>
		</ul>
	</div>
	<a class="off-canvas-overlay" href="#close"></a>
	<div class="off-canvas-content">
		<h1 id="title"><img src="/logo.png" alt="W"/> Wrapl, The Programming Language</h1>
<ul class="breadcrumb"><li class="breadcrumb-item"><a href="/lib.xhtml">Libraries</a></li><li class="breadcrumb-item"><a href="/lib/IO.xhtml">IO</a></li><li class="breadcrumb-item"><a href="/lib/IO/Stream.xhtml">Stream</a></li></ul><section id="Stream" class="section"><h2>Stream</h2><section id="SubModules" data-spy="true" data-target="#side-menu"><h3>SubModules</h3><div class="module"><a href="/lib/IO/Stream/CloseMode.xhtml">CloseMode</a></div><div class="module"><a href="/lib/IO/Stream/Message.xhtml">Message</a></div><div class="module"><a href="/lib/IO/Stream/SeekMode.xhtml">SeekMode</a></div></section><section id="Types" data-spy="true" data-target="#side-menu"><h3>Types</h3><h4 id="T"><span class="code">T</span></h4><div class="comment">
A stream of bytes. Streams may be read-only, write-only or read-write and may support seeking. New stream types should inherit from one of the subtypes defined below.<br></br>
	</div><h4 id="ReaderT"><span class="code">ReaderT</span></h4>Inherits from: <a class="id" href="#T">T</a>
<div class="comment">
		
A readable stream. Subtypes of <span class="var">ReaderT</span> should define at least the <span class="code"><span class="symbol">:read</span><span class="delimiter">(@</span><span class="var">ReaderT</span><span class="delimiter">,</span> <span class="delimiter">@</span><span class="var">Std</span><span class="delimiter">.</span><span class="var">Address</span><span class="delimiter">.</span><span class="var">T</span><span class="delimiter">,</span> <span class="delimiter">@</span><span class="var">Std</span><span class="delimiter">.</span><span class="var">Integer</span><span class="delimiter">.</span><span class="var">SmallT</span><span class="delimiter">)</span></span> method, default implementations for the other read methods are provided in this module.<br></br>
	</div><h4 id="WriterT"><span class="code">WriterT</span></h4>Inherits from: <a class="id" href="#T">T</a>
<div class="comment">
		
A writable stream. Subtypes of <span class="var">WriterT</span> should define at least the <span class="code"><span class="symbol">:write</span><span class="delimiter">(@</span><span class="var">WriterT</span><span class="delimiter">,</span> <span class="delimiter">@</span><span class="var">Std</span><span class="delimiter">.</span><span class="var">Address</span><span class="delimiter">.</span><span class="var">T</span><span class="delimiter">,</span> <span class="delimiter">@</span><span class="var">Std</span><span class="delimiter">.</span><span class="var">Integer</span><span class="delimiter">.</span><span class="var">SmallT</span><span class="delimiter">)</span></span> method, default implementations for the other write methods are provided in this module.<br></br>
	</div><h4 id="SeekerT"><span class="code">SeekerT</span></h4>Inherits from: <a class="id" href="#T">T</a>
<div class="comment">
		
A seekable stream. Subtypes of <span class="var">SeekerT</span> should define at least the <span class="code"><span class="symbol">:seek</span><span class="delimiter">(@</span><span class="var">SeekerT</span><span class="delimiter">,</span> <span class="delimiter">@</span><span class="var">Std</span><span class="delimiter">.</span><span class="var">Integer</span><span class="delimiter">.</span><span class="var">SmallT</span><span class="delimiter">)</span></span> method, default implementations for the other seek methods are provided in this module.<br></br>
	</div><h4 id="TextReaderT"><span class="code">TextReaderT</span></h4>Inherits from: <a class="id" href="#ReaderT">ReaderT</a>, <a class="id" href="#T">T</a>
<div class="comment">
		
		
A readable stream with added methods for reading text.<br></br>
	</div><h4 id="TextWriterT"><span class="code">TextWriterT</span></h4>Inherits from: <a class="id" href="#WriterT">WriterT</a>, <a class="id" href="#T">T</a>
<div class="comment">
		
		
A writable stream with added methods for writing text.<br></br>
	</div></section><section id="Functions" data-spy="true" data-target="#side-menu"><h3>Functions</h3><h4 id="Std$String$Of"><span class="code">Std$String$Of<span class="delimiter">(</span><span class="var">msg</span> <span class="delimiter">@</span> <a class="id" href="#MessageT">MessageT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a></span></h4><div class="comment">
		
	</div></section><section id="Methods" data-spy="true" data-target="#side-menu"><h3>Methods</h3><h4 id="close"><span class="code"><span class="symbol">:close</span><span class="delimiter">(</span><span class="var">t</span> <span class="delimiter">@</span> <a class="id" href="#T">T</a><span class="delimiter">)</span></span></h4><div class="comment">
		
Closes <span class="var">t</span> for further reading or writing<br></br>
	</div><h4 id="closed"><span class="code"><span class="symbol">:closed</span><span class="delimiter">(</span><span class="var">t</span> <span class="delimiter">@</span> <a class="id" href="#T">T</a><span class="delimiter">)</span></span></h4><div class="comment">
		
Fails if <span class="var">t</span> is still open for reading or writing.<br></br>
	</div><h4 id="copy"><span class="code"><span class="symbol">:copy</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">,</span> <span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#WriterT">WriterT</a><span class="delimiter">,</span> <span class="var">count</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a></span></h4><div class="comment">
		
		
		
Copies <span class="var">count</span> bytes from <span class="var">rd</span> to <span class="var">wr</span>.<br></br>
	</div><h4 id="copy"><span class="code"><span class="symbol">:copy</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">,</span> <span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#WriterT">WriterT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/Integer.xhtml#T">Std.Integer.T</a></span></h4><div class="comment">
		
		
Copies the contents of <span class="var">rd</span> to <span class="var">wr</span>.<br></br>
	</div><h4 id="eoi"><span class="code"><span class="symbol">:eoi</span><span class="delimiter">(</span><span class="var">t</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">)</span></span></h4><div class="comment">
		
Succeeds if <span class="var">t</span> has read an end of file marker.<br></br>
	</div><h4 id="flush"><span class="code"><span class="symbol">:flush</span><span class="delimiter">(</span><span class="var">t</span> <span class="delimiter">@</span> <a class="id" href="#T">T</a><span class="delimiter">)</span></span></h4><div class="comment">
		
Completes any pending operations on <span class="var">t</span>.<br></br>
	</div><h4 id="link"><span class="code"><span class="symbol">:link</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#T">T</a><span class="delimiter">,</span> <span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#T">T</a><span class="delimiter">)</span></span></h4><div class="comment">
		
		
Links <span class="var">rd</span> and <span class="var">wr</span> so that any input available on <span class="var">rd</span> is written to <span class="var">wr</span>.<br></br>
The default implementation creates a new thread and so <span class="var">rd</span> should block until input is available.<br></br>
	</div><h4 id="read"><span class="code"><span class="symbol">:read</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#TextReaderT">TextReaderT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a></span></h4><div class="comment">
		
Reads the next line of text from <span class="var">rd</span> and returns it as a string without the carriage return.<br></br>
This methods differs from <span class="code"><span class="var">t</span><span class="symbol">:readx</span><span class="delimiter">(</span><span class="literal">"\n"</span><span class="delimiter">,</span> 0<span class="delimiter">)</span></span> in that it treats <span class="code"><span class="literal">"\r\n"</span></span> as a single carriage return.<br></br>
	</div><h4 id="read"><span class="code"><span class="symbol">:read</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">,</span> <span class="var">count</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a></span></h4><div class="comment">
		
		
Reads <span class="var">count</span> bytes from <span class="var">rd</span> and returns them as a string.<br></br>
	</div><h4 id="read"><span class="code"><span class="symbol">:read</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">,</span> <span class="var">buffer</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Address.xhtml#T">Std.Address.T</a><span class="delimiter">,</span> <span class="var">length</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a></span></h4><div class="comment">
		
		
		
Reads up to <span class="var">length</span> bytes from <span class="var">rd</span> into <span class="var">buffer</span><br></br>
Returns the number of bytes read<br></br>
	</div><h4 id="readi"><span class="code"><span class="symbol">:readi</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">,</span> <span class="var">max</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">,</span> <span class="var">terminal</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a></span></h4><div class="comment">
		
		
		
Reads bytes from <span class="var">rd</span> until either <span class="var">max</span> bytes have been read, or a byte in <span class="var">terminal</span> has been read, or <span class="var">rd</span> is empty.<br></br>
Returns the bytes read as a string <em>including</em> the final byte if it is in <span class="var">terminal</span>.<br></br>
Passing <span class="code">0</span> for <span class="var">max</span> will ignore the number of bytes read.<br></br>
If <span class="code"><span class="var">terminal</span> <span class="delimiter">=</span> <span class="literal">""</span></span>, then only the number of bytes is checked<br></br>
If both <span class="code"><span class="var">max</span> <span class="delimiter">=</span> 0</span> and <span class="code"><span class="var">terminal</span> <span class="delimiter">=</span> <span class="literal">""</span></span> then all the remaining bytes from <span class="var">rd</span> are returned.<br></br>
	</div><h4 id="readx"><span class="code"><span class="symbol">:readx</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">,</span> <span class="var">max</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">,</span> <span class="var">terminal</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a></span></h4><div class="comment">
		
		
		
Reads bytes from <span class="var">rd</span> until either <span class="var">max</span> bytes have been read, or a byte in <span class="var">terminal</span> has been read, or <span class="var">rd</span> is empty.<br></br>
Returns the bytes read as a string <em>excluding</em> the final byte if it is in <span class="var">terminal</span>.<br></br>
Passing <span class="code">0</span> for <span class="var">max</span> will ignore the number of bytes read.<br></br>
If <span class="code"><span class="var">terminal</span> <span class="delimiter">=</span> <span class="literal">""</span></span>, then only the number of bytes is checked<br></br>
If both <span class="code"><span class="var">max</span> <span class="delimiter">=</span> 0</span> and <span class="code"><span class="var">terminal</span> <span class="delimiter">=</span> <span class="literal">""</span></span> then all the remaining bytes from <span class="var">rd</span> are returned.<br></br>
	</div><h4 id="rest"><span class="code"><span class="symbol">:rest</span><span class="delimiter">(</span><span class="var">rd</span> <span class="delimiter">@</span> <a class="id" href="#ReaderT">ReaderT</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a></span></h4><div class="comment">
		
Returns the remaining contents of <span class="var">rd</span>.<br></br>
	</div><h4 id="seek"><span class="code"><span class="symbol">:seek</span><span class="delimiter">(</span><span class="var">t</span> <span class="delimiter">@</span> <a class="id" href="#SeekerT">SeekerT</a><span class="delimiter">,</span> <span class="var">position</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">,</span> <span class="var">_</span> <span class="delimiter">@</span> <a class="id" href="#SeekMode.T">SeekMode.T</a><span class="delimiter">)</span></span></h4><div class="comment">
		
		
		
Seeks to the <span class="var">position</span><sup>th</sup> byte in <span class="var">t</span><br></br>
	</div><h4 id="tell"><span class="code"><span class="symbol">:tell</span><span class="delimiter">(</span><span class="var">t</span> <span class="delimiter">@</span> <a class="id" href="#T">T</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a></span></h4><div class="comment">
		
Returns the current position in <span class="var">t</span><br></br>
	</div><h4 id="write"><span class="code"><span class="symbol">:write</span><span class="delimiter">(</span><span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#WriterT">WriterT</a><span class="delimiter">,</span> <span class="var">string</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/String.xhtml#T">Std.String.T</a><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="#WriterT">WriterT</a></span></h4><div class="comment">
		
		
Writes <span class="var">string</span> to <span class="var">wr</span>.<br></br>
	</div><h4 id="write"><span class="code"><span class="symbol">:write</span><span class="delimiter">(</span><span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#TextWriterT">TextWriterT</a><span class="delimiter">,</span> <span class="var">value</span><span class="delimiter">)</span> <span class="delimiter">:</span> <a class="id" href="#TextWriterT">TextWriterT</a></span></h4><div class="comment">
		
		
Writes <span class="code"><span class="var">value</span><span class="delimiter">@</span><span class="var">Std</span><span class="delimiter">.</span><span class="var">String</span><span class="delimiter">.</span><span class="var">T</span></span> to <span class="var">wr</span>.<br></br>
	</div><h4 id="write"><span class="code"><span class="symbol">:write</span><span class="delimiter">(</span><span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#WriterT">WriterT</a><span class="delimiter">,</span> <span class="var">buffer</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Address.xhtml#T">Std.Address.T</a><span class="delimiter">,</span> <span class="var">length</span> <span class="delimiter">@</span> <a class="id" href="/lib/Std/Integer.xhtml#SmallT">Std.Integer.SmallT</a><span class="delimiter">)</span></span></h4><div class="comment">
		
		
		
Writes up to <span class="var">length</span> bytes to <span class="var">wr</span> from <span class="var">buffer</span><br></br>
Returns the number of bytes written<br></br>
	</div><h4 id="writes"><span class="code"><span class="symbol">:writes</span><span class="delimiter">(</span><span class="var">wr</span> <span class="delimiter">@</span> <a class="id" href="#TextWriterT">TextWriterT</a><span class="delimiter">)</span></span></h4><div class="comment">
		
 Writes each argument after the first to <span class="var">wr</span>.<br></br>
	</div></section></section>
		<footer>
			<div class="text-center">
				<span>Copyright: &copy; 2008-2018 Raja Mukherji</span>
			</div>
		</footer>
	</div>
</div>
</body>
</html>